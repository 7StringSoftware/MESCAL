/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

#include <cstring>

namespace BinaryData
{

//================== EffectParameters.json ==================
static const unsigned char temp_binary_data_0[] =
"{\n"
"  \"Effects\": [\n"
"    {\n"
"      \"Name\": \"GaussianBlur\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Standard deviation\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 100.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Optimization mode\",\n"
"          \"Values\": [ \"Speed\", \"Balanced\", \"Quality\" ]\n"
"        },\n"
"        {\n"
"          \"Name\": \"Border mode\",\n"
"          \"Values\": [ \"Soft\", \"Hard\" ]\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"SpotSpecularLighting\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Light position\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Focus point position\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Focus\",\n"
"          \"Range\": {\n"
"            \"Min\": -100.0,\n"
"            \"Max\": 100.0\n"
"          },\n"
"          \"Skew\": {\n"
"            \"Factor\" : 0.25,\n"
"            \"Symmetric\" : true\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Limiting cone angle\",\n"
"          \"Range\": {\n"
"            \"Min\": -90.0,\n"
"            \"Max\": 90.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Specular exponent\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 128.0\n"
"          },\n"
"          \"Skew\": {\n"
"            \"Factor\": 0.25,\n"
"            \"Symmetric\": true\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Specular constant\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 10000.0\n"
"          },\n"
"          \"Skew\": {\n"
"            \"Factor\": 0.25,\n"
"            \"Symmetric\": false\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Surface scale\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 10000.0\n"
"          },\n"
"          \"Skew\": {\n"
"            \"Factor\": 0.25,\n"
"            \"Symmetric\": true\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Light color\",\n"
"          \"Labels\": [\n"
"            \"r\",\n"
"            \"g\",\n"
"            \"b\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 1.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Kernel unit length\",\n"
"          \"Range\": {\n"
"            \"Min\": -100.0,\n"
"            \"Max\": 100.0\n"
"          },\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\"\n"
"          ]\n"
"        },\n"
"        {\n"
"          \"Name\": \"Scale mode\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"Shadow\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Standard deviation\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 100.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Color\",\n"
"          \"Labels\": [\n"
"            \"r\",\n"
"            \"g\",\n"
"            \"b\",\n"
"            \"a\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 1.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Optimization mode\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"SpotDiffuseLighting\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Light position\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Light points at\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Focus\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 200.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Limiting cone angle\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 90.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Diffuse constant\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 10000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Surface scale\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 10000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Light color\",\n"
"          \"Labels\": [\n"
"            \"r\",\n"
"            \"g\",\n"
"            \"b\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 1.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Kernel unit length\",\n"
"          \"Range\": {\n"
"            \"Min\": -100.0,\n"
"            \"Max\": 100.0\n"
"          },\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\"\n"
"          ]\n"
"        },\n"
"        {\n"
"          \"Name\": \"Scale mode\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"3DPerspectiveTransform\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Interpolation mode\"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Border mode\"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Depth\",\n"
"          \"Range\": {\n"
"            \"Min\": 0.0,\n"
"            \"Max\": 10000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"PerspectiveOrigin\",\n"
"          \"Range\": {\n"
"            \"Min\": -100.0,\n"
"            \"Max\": 100.0\n"
"          },\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\"\n"
"          ]\n"
"        },\n"
"        {\n"
"          \"Name\": \"LocalOffset\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"GlobalOffset\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Origin\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -1000.0,\n"
"            \"Max\": 1000.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"Rotation\",\n"
"          \"Labels\": [\n"
"            \"x\",\n"
"            \"y\",\n"
"            \"z\"\n"
"          ]\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"Blend\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Mode\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"Composite\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Mode\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"ArithmeticComposite\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Coefficients\",\n"
"          \"Labels\": [\n"
"            \"C1\",\n"
"            \"C2\",\n"
"            \"C3\",\n"
"            \"C4\"\n"
"          ],\n"
"          \"Range\": {\n"
"            \"Min\": -100.0,\n"
"            \"Max\": 100.0\n"
"          }\n"
"        },\n"
"        {\n"
"          \"Name\": \"ClampOutput\"\n"
"        }\n"
"      ]\n"
"    },\n"
"\n"
"    {\n"
"      \"Name\": \"Affine Transform (2D)\",\n"
"      \"Properties\": [\n"
"        {\n"
"          \"Name\": \"Interpolation mode\"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Border mode\"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Transform matrix\"\n"
"        },\n"
"        {\n"
"          \"Name\": \"Sharpness\"\n"
"        }\n"
"      ]\n"
"    }\n"
"\n"
"  ]\n"
"}\n";

const char* EffectParameters_json = (const char*) temp_binary_data_0;


const char* getNamedResource (const char* resourceNameUTF8, int& numBytes);
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes)
{
    unsigned int hash = 0;

    if (resourceNameUTF8 != nullptr)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0xaa96602c:  numBytes = 6888; return EffectParameters_json;
        default: break;
    }

    numBytes = 0;
    return nullptr;
}

const char* namedResourceList[] =
{
    "EffectParameters_json"
};

const char* originalFilenames[] =
{
    "EffectParameters.json"
};

const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8);
const char* getNamedResourceOriginalFilename (const char* resourceNameUTF8)
{
    for (unsigned int i = 0; i < (sizeof (namedResourceList) / sizeof (namedResourceList[0])); ++i)
        if (strcmp (namedResourceList[i], resourceNameUTF8) == 0)
            return originalFilenames[i];

    return nullptr;
}

}
